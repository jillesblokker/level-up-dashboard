<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="/Users/jillesblokker/Downloads/level-up/__tests__/lib/validation/schemas.test.ts">
    <testCase name="Validation Schemas Quest Schema validates a valid quest" duration="5"/>
    <testCase name="Validation Schemas Quest Schema requires title" duration="1"/>
    <testCase name="Validation Schemas Quest Schema enforces title length limit" duration="2"/>
    <testCase name="Validation Schemas Quest Schema enforces description length limit" duration="0"/>
    <testCase name="Validation Schemas Quest Schema validates category enum values" duration="1"/>
    <testCase name="Validation Schemas Quest Schema validates difficulty enum values" duration="1"/>
    <testCase name="Validation Schemas Quest Schema enforces XP range" duration="0"/>
    <testCase name="Validation Schemas Quest Schema enforces gold range" duration="0"/>
    <testCase name="Validation Schemas Quest Schema allows optional fields to be undefined" duration="1"/>
    <testCase name="Validation Schemas Quest Schema accepts valid tags array" duration="0"/>
    <testCase name="Validation Schemas Challenge Schema validates a valid challenge" duration="0"/>
    <testCase name="Validation Schemas Challenge Schema requires name" duration="1"/>
    <testCase name="Validation Schemas Challenge Schema enforces name length limit" duration="0"/>
    <testCase name="Validation Schemas Challenge Schema validates category enum values" duration="1"/>
    <testCase name="Validation Schemas Challenge Schema enforces target minimum value" duration="0"/>
    <testCase name="Validation Schemas Challenge Schema validates frequency enum values" duration="0"/>
    <testCase name="Validation Schemas User Schema validates a valid user" duration="1"/>
    <testCase name="Validation Schemas User Schema requires id" duration="4"/>
    <testCase name="Validation Schemas User Schema validates email format" duration="1"/>
    <testCase name="Validation Schemas User Schema allows email to be optional" duration="1"/>
    <testCase name="Validation Schemas Quest Completion Schema validates a valid quest completion" duration="1"/>
    <testCase name="Validation Schemas Quest Completion Schema requires questId" duration="0"/>
    <testCase name="Validation Schemas Quest Completion Schema validates UUID format for questId" duration="1"/>
    <testCase name="Validation Schemas Quest Completion Schema enforces non-negative XP and gold" duration="1"/>
    <testCase name="Validation Schemas Quest Completion Schema enforces notes length limit" duration="0"/>
    <testCase name="Validation Schemas Quest Form Schema validates quest form data" duration="0"/>
    <testCase name="Validation Schemas Quest Form Schema excludes id field" duration="1"/>
    <testCase name="Validation Schemas Quest Filters Schema validates quest filters" duration="0"/>
    <testCase name="Validation Schemas Quest Filters Schema allows partial filters" duration="1"/>
    <testCase name="Validation Schemas Quest Filters Schema allows empty filters" duration="0"/>
    <testCase name="Validation Schemas Date Range Schema validates valid date range" duration="0"/>
    <testCase name="Validation Schemas Date Range Schema validates same start and end date" duration="0"/>
    <testCase name="Validation Schemas Date Range Schema rejects invalid date format" duration="0"/>
    <testCase name="Validation Schemas Date Range Schema rejects end date before start date" duration="1"/>
    <testCase name="Validation Schemas Validation Helper Functions validateSchema returns success result for valid data" duration="1"/>
    <testCase name="Validation Schemas Validation Helper Functions validateSchema returns error result for invalid data" duration="0"/>
    <testCase name="Validation Schemas Validation Helper Functions safeParse returns parsed data for valid input" duration="1"/>
    <testCase name="Validation Schemas Validation Helper Functions safeParse returns null for invalid input" duration="0"/>
    <testCase name="Validation Schemas Edge Cases handles empty strings appropriately" duration="1"/>
    <testCase name="Validation Schemas Edge Cases handles null values appropriately" duration="0"/>
    <testCase name="Validation Schemas Edge Cases handles undefined values appropriately" duration="0"/>
    <testCase name="Validation Schemas Edge Cases handles very large numbers" duration="1"/>
    <testCase name="Validation Schemas Schema Composition allows extending base schemas" duration="0"/>
    <testCase name="Validation Schemas Schema Composition maintains validation rules when extending" duration="0"/>
  </file>
  <file path="/Users/jillesblokker/Downloads/level-up/__tests__/lib/store/app-store.test.ts">
    <testCase name="App Store Initial State has correct initial state" duration="42"/>
    <testCase name="App Store User Actions sets user data correctly" duration="1"/>
    <testCase name="App Store User Actions updates user preferences" duration="1"/>
    <testCase name="App Store User Actions merges user data without overwriting existing fields" duration="1"/>
    <testCase name="App Store Quest Actions sets quests correctly" duration="1"/>
    <testCase name="App Store Quest Actions toggles quest completion correctly" duration="0"/>
    <testCase name="App Store Quest Actions handles quest completion for non-existent quest" duration="1"/>
    <testCase name="App Store Inventory Actions sets inventory correctly" duration="1"/>
    <testCase name="App Store Inventory Actions overwrites existing inventory" duration="1"/>
    <testCase name="App Store UI Actions sets UI state correctly" duration="0"/>
    <testCase name="App Store UI Actions merges UI state without overwriting existing fields" duration="1"/>
    <testCase name="App Store Reset App Action resets app state to initial values" duration="3"/>
    <testCase name="App Store Selector Hooks useUser returns user state" duration="2"/>
    <testCase name="App Store Selector Hooks useQuests returns quests state" duration="2"/>
    <testCase name="App Store Selector Hooks useInventory returns inventory state" duration="2"/>
    <testCase name="App Store Selector Hooks useUI returns UI state" duration="3"/>
    <testCase name="App Store Selector Hooks useAppActions returns all actions" duration="0"/>
    <testCase name="App Store State Updates triggers re-renders when state changes" duration="5"/>
    <testCase name="App Store State Updates maintains referential equality for unchanged objects" duration="2"/>
    <testCase name="App Store Edge Cases handles empty arrays and objects" duration="1"/>
    <testCase name="App Store Edge Cases handles null and undefined values gracefully" duration="1"/>
  </file>
  <file path="/Users/jillesblokker/Downloads/level-up/__tests__/components/error-boundary.test.tsx">
    <testCase name="ErrorBoundary ErrorBoundary Component renders children when there is no error" duration="84"/>
    <testCase name="ErrorBoundary ErrorBoundary Component renders error fallback when child throws error" duration="118"/>
    <testCase name="ErrorBoundary ErrorBoundary Component shows error details in development mode" duration="13"/>
    <testCase name="ErrorBoundary ErrorBoundary Component hides error details in production mode" duration="18"/>
    <testCase name="ErrorBoundary ErrorBoundary Component calls resetError when Try Again button is clicked" duration="30"/>
    <testCase name="ErrorBoundary ErrorBoundary Component navigates to home when Go Home button is clicked" duration="14"/>
    <testCase name="ErrorBoundary ErrorBoundary Component logs error details to console" duration="6"/>
    <testCase name="ErrorBoundary withErrorBoundary HOC wraps component with error boundary" duration="1"/>
    <testCase name="ErrorBoundary withErrorBoundary HOC handles errors in wrapped component" duration="7"/>
    <testCase name="ErrorBoundary withErrorBoundary HOC maintains component display name" duration="0"/>
    <testCase name="ErrorBoundary Custom Fallback renders custom fallback when provided" duration="8"/>
    <testCase name="ErrorBoundary Custom Fallback calls custom resetError function" duration="8"/>
    <testCase name="ErrorBoundary Error Boundary State Management maintains error state correctly" duration="6"/>
    <testCase name="ErrorBoundary Error Boundary State Management handles multiple error states" duration="7"/>
    <testCase name="ErrorBoundary Accessibility has proper ARIA labels and roles" duration="70"/>
    <testCase name="ErrorBoundary Accessibility provides clear error information" duration="9"/>
  </file>
</testExecutions>