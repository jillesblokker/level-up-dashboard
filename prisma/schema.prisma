generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean           @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  inventory     Item[]
  quests        QuestCompletion[]
  sessions      Session[]
  tiles         TilePlacement[]
  characters    Character[]
  realmMap      RealmMap?

  @@index([email])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@index([expires])
}

model Item {
  id        String   @id @default(cuid())
  name      String
  quantity  Int      @default(1)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([name])
}

model TilePlacement {
  id        String   @id @default(cuid())
  userId    String
  tileType  String
  posX      Int
  posY      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, posX, posY])
  @@index([userId])
  @@index([tileType])
}

model QuestCompletion {
  id        String   @id @default(cuid())
  userId    String
  category  String
  questName String
  completed Boolean  @default(true)
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest     Quest?   @relation(fields: [questName], references: [name], onDelete: Cascade)

  @@unique([userId, category, questName, date])
  @@index([userId])
  @@index([questName])
  @@index([date])
}

model Quest {
  id          String            @id @default(cuid())
  name        String            @unique
  description String
  category    String
  difficulty  Int
  rewards     String           // Stored as JSON string
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  completions QuestCompletion[]

  @@index([category])
  @@index([difficulty])
}

model Character {
  id        String   @id @default(cuid())
  userId    String
  name      String
  class     String
  level     Int      @default(1)
  exp       Int      @default(0)
  stats     String   // Stored as JSON string
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@index([userId])
  @@index([class])
  @@index([level])
}

model RealmMap {
  id         String   @id @default(cuid())
  userId     String   @unique
  grid       String   // Stored as JSON string
  lastSynced DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
