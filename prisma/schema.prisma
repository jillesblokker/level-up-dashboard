generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String            @id @default(cuid())
  name          String?
  email         String?           @unique
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean           @default(false)
  accounts      Account[]
  inventory     Item[]
  quests        QuestCompletion[]
  sessions      Session[]
  tiles         TilePlacement[]
  achievements  Achievement[]
  characters    Character[]
  realmMaps     RealmMap[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Item {
  id        String   @id @default(cuid())
  name      String
  quantity  Int      @default(1)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TilePlacement {
  id        String   @id @default(cuid())
  userId    String
  tileType  String
  posX      Int
  posY      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, posX, posY])
}

model QuestCompletion {
  id        String   @id @default(cuid())
  userId    String
  category  String
  questName String
  completed Boolean  @default(true)
  date      DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, category, questName, date])
}

model Achievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  unlocked      Boolean   @default(false)
  unlockedAt    DateTime?
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model Quest {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  category    String
  difficulty  Int
  rewards     String // JSON stringified rewards
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Character {
  id     String @id @default(cuid())
  userId String
  name   String
  class  String
  level  Int    @default(1)
  exp    Int    @default(0)
  stats  String // JSON stringified stats
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
}

model RealmMap {
  id     String @id @default(cuid())
  userId String @unique
  grid   String // JSON stringified grid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
