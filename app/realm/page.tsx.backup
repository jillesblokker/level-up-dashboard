"use client"

import { useEffect, useState, useCallback } from "react"
import { useLocalStorage } from "@/lib/hooks/use-local-storage"
import { Button } from "@/components/ui/button"
import { useToast } from "@/components/ui/use-toast"
import { Tile, TileType, InventoryItem as TileInventoryItem } from '@/types/tiles'
import { MapGrid } from '../../components/map-grid'
import { TileInventory } from '@/components/tile-inventory'
import { Switch } from "@/components/ui/switch"
import { useUser } from '@clerk/nextjs'
import React from "react"
import { createTileFromNumeric } from "@/lib/grid-loader"
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { ScrollArea } from '@/components/ui/scroll-area'
import { X, Hammer, Move, Package, Settings, Save } from 'lucide-react'
import { useRouter } from 'next/navigation'
import { EnterLocationModal } from '@/components/enter-location-modal'
import { EnterLocationModal } from '@/components/enter-location-modal'

// Constants
const GRID_COLS = 13
const INITIAL_ROWS = 7
const AUTOSAVE_INTERVAL = 30000 // 30 seconds

const defaultTile = (type: TileType): Tile => ({
    id: type,
    name: type.charAt(0).toUpperCase() + type.slice(1),
    description: `${type.charAt(0).toUpperCase() + type.slice(1)} tile`,
    type,
    connections: [],
    rotation: 0,
    revealed: true,
    isVisited: false,
    x: 0,
    y: 0,
    ariaLabel: `${type} tile`,
    image: `/images/tiles/${type}-tile.png`,
    cost: 0,
    quantity: 0
});

// Special handling for tiles that might not have exact image files
const getTileImage = (type: TileType): string => {
    // Check if the exact image exists, otherwise use a fallback
    const exactPath = `/images/tiles/${type}-tile.png`;
    
    // For portal type, use portal-entrance as fallback
    if (type === 'portal') {
        return '/images/tiles/portal-entrance-tile.png';
    }
    
    return exactPath;
};

const allTileTypes: TileType[] = [
    'empty', 'mountain', 'grass', 'forest', 'water', 'city', 'town', 'mystery', 'portal',
    'portal-entrance', 'portal-exit', 'snow', 'cave', 'dungeon', 'castle', 'ice', 'desert',
    'lava', 'volcano'
];

const initialInventory: Record<TileType, Tile> = Object.fromEntries(
    allTileTypes.map(type => {
        const tile = defaultTile(type);
        tile.image = getTileImage(type); // Use the corrected image path
        if (['grass', 'forest', 'water'].includes(type)) {
            tile.quantity = 10;
        }
        return [type, tile];
    })
) as Record<TileType, Tile>;

const createBaseGrid = (): Tile[][] => {
    return Array.from({ length: INITIAL_ROWS }, (_, y) =>
        Array.from({ length: GRID_COLS }, (_, x) => ({
            ...defaultTile('grass'),
            x,
            y,
            id: `grass-${x}-${y}`,
            image: getTileImage('grass') // Use the corrected image path
        }))
    );
};

const loadInitialGridFromCSV = async (): Promise<Tile[][]> => {
    try {
        const response = await fetch('/data/initial-grid.csv');
        if (!response.ok) throw new Error("CSV not found");
        const csvText = await response.text();
        const lines = csvText.trim().split('\n');
        const gridData = lines.slice(1).map(line =>
            line.split(',').map(num => parseInt(num.trim(), 10))
        );
        return gridData.map((row, y) =>
            row.map((numeric, x) => createTileFromNumeric(numeric, x, y))
        );
    } catch (error) {
        console.error('Failed to load initial grid from CSV, using default:', error);
        return createBaseGrid();
    }
};

export default function RealmPage() {
    const { toast } = useToast();
    const { user, isLoaded: isAuthLoaded } = useUser();
    const userId = user?.id;
    const isGuest = !user;
    const router = useRouter();

    const [grid, setGrid] = useState<Tile[][]>(createBaseGrid());
    const [isLoading, setIsLoading] = useState(true);
    const [saveStatus, setSaveStatus] = useState<'idle' | 'saving' | 'saved' | 'error'>('idle');
    const [characterPosition, setCharacterPosition] = useLocalStorage('characterPosition', { x: 6, y: 3 });
    const [inventory, setInventory] = useLocalStorage<Record<TileType, Tile>>('tileInventory', initialInventory);
    const [showInventory, setShowInventory] = useState(false);
    const [selectedTile, setSelectedTile] = useState<TileInventoryItem | null>(null);
    const [autoSave, setAutoSave] = useState(true);
    const [gameMode, setGameMode] = useState<'build' | 'move'>('move');
    const [hasVisitedRealm, setHasVisitedRealm] = useLocalStorage('hasVisitedRealm', false);
    const [modalState, setModalState] = useState<{ isOpen: boolean; locationType: 'city' | 'town'; locationName: string } | null>(null);
    // Achievement unlock effect
    useEffect(() => {
        if (!hasVisitedRealm && isAuthLoaded) {
            setHasVisitedRealm(true);
            // Unlock the Necrion achievement (000)
            if (userId) {
                fetch('/api/achievements/unlock', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ achievementId: '000' })
                }).catch(console.error);
            }
            toast({
                title: "Achievement Unlocked!",
                description: "Necrion - You've discovered the realm map!",
            });
        }
    }, [hasVisitedRealm, isAuthLoaded, userId, setHasVisitedRealm, toast]);

    const saveGrid = useCallback(async (currentGrid: Tile[][]) => {
        if (isGuest) {
            localStorage.setItem('guest-realm-grid', JSON.stringify(currentGrid));
            setSaveStatus('saved');
            return;
        }
        if (!userId) return;

        setSaveStatus('saving');
        try {
            const response = await fetch('/api/realm', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ grid: currentGrid }),
            });
            if (!response.ok) throw new Error('Failed to save grid.');
            setSaveStatus('saved');
        } catch (error) {
            console.error("Failed to save grid:", error);
            setSaveStatus('error');
            toast({
                title: "Save Failed",
                description: "Could not save your realm. Progress is saved locally.",
                variant: "destructive",
            });
            localStorage.setItem(`fallback-grid-${userId}`, JSON.stringify(currentGrid));
        }
    }, [userId, isGuest, toast]);

    useEffect(() => {
        const initializeGrid = async () => {
            setIsLoading(true);
            let loadedGrid: Tile[][] | null = null;

            if (isGuest) {
                const localGrid = localStorage.getItem('guest-realm-grid');
                if (localGrid) try { loadedGrid = JSON.parse(localGrid); } catch {}
            } else if (userId) {
                try {
                    const fallbackGrid = localStorage.getItem(`fallback-grid-${userId}`);
                    if (fallbackGrid) {
                        loadedGrid = JSON.parse(fallbackGrid);
                        toast({ title: "Loaded Local Save", description: "Your previous unsaved progress was loaded." });
                        localStorage.removeItem(`fallback-grid-${userId}`);
                    } else {
                        const response = await fetch('/api/realm');
                        if (response.ok) {
                            const data = await response.json();
                            if (data.grid) loadedGrid = JSON.parse(data.grid);
                        }
                    }
                } catch (error) {
                    console.error('Error fetching grid from API:', error);
                    toast({ title: "Error", description: "Could not load your realm data.", variant: "destructive" });
                }
            }

            if (loadedGrid && Array.isArray(loadedGrid) && (loadedGrid.length === 0 || Array.isArray(loadedGrid[0]))) {
                setGrid(loadedGrid);
            } else {
                const initialGrid = await loadInitialGridFromCSV();
                setGrid(initialGrid);
            }
            setIsLoading(false);
        };

        if (isAuthLoaded) {
            initializeGrid();
        }
    }, [userId, isAuthLoaded, isGuest, toast]);

    useEffect(() => {
        if (autoSave && saveStatus !== 'saving') {
            const timer = setTimeout(() => saveGrid(grid), AUTOSAVE_INTERVAL);
            return () => clearTimeout(timer);
        }
        return undefined;
    }, [grid, saveGrid, saveStatus, autoSave]);

    const handlePlaceTile = (x: number, y: number) => {
        if (gameMode !== 'build' || !selectedTile) return;

        const tileToPlace = inventory[selectedTile.type];
        if (!tileToPlace || (tileToPlace.quantity ?? 0) <= 0) return;

        setGrid(prevGrid => {
            const newGrid = prevGrid.map(row => row.slice());
            if (newGrid[y]?.[x]) {
                newGrid[y][x] = { ...tileToPlace, x, y, id: `${tileToPlace.type}-${x}-${y}`, quantity: 1 };
            }
            return newGrid;
        });

        setInventory(prev => {
            const newInventory = { ...prev };
            const invTile = newInventory[selectedTile.type];
            if (invTile) {
                invTile.quantity = (invTile.quantity ?? 0) - 1;
            }
            return newInventory;
        });

        setSelectedTile(null);
    };

    const handleTileSelection = (tile: TileInventoryItem | null) => {
        if (tile?.type && inventory[tile.type] && (inventory[tile.type].quantity ?? 0) > 0) {
            setSelectedTile(tile);
            setShowInventory(false);
        } else {
            setSelectedTile(null);
        }
    };

    const handleCharacterMove = (x: number, y: number) => {
        if (gameMode === 'move') {
            setCharacterPosition({ x, y });
        }
    };

    // Keyboard movement handlers
    useEffect(() => {
        const handleKeyDown = (event: KeyboardEvent) => {
            if (gameMode !== 'move') return;
            
            const currentPos = characterPosition;
            let newX = currentPos.x;
            let newY = currentPos.y;
            
            switch (event.key) {
                case 'ArrowUp':
                case 'w':
                case 'W':
                    newY = Math.max(0, currentPos.y - 1);
                    break;
                case 'ArrowDown':
                case 's':
                case 'S':
                    newY = Math.min(grid.length - 1, currentPos.y + 1);
                    break;
                case 'ArrowLeft':
                case 'a':
                case 'A':
                    newX = Math.max(0, currentPos.x - 1);
                    break;
                case 'ArrowRight':
                case 'd':
                case 'D':
                    newX = Math.min((grid[0]?.length ?? 0) - 1, currentPos.x + 1);
                    break;
                default:
                    return;
            }
            
            if (newX !== currentPos.x || newY !== currentPos.y) {
                setCharacterPosition({ x: newX, y: newY });
            }
        };

        window.addEventListener('keydown', handleKeyDown);
        return () => window.removeEventListener('keydown', handleKeyDown);
    }, [gameMode, characterPosition, grid]);

    // Effect to handle landing on special tiles
    useEffect(() => {
        if (!grid.length || !grid[characterPosition.y]?.[characterPosition.x]) return;

        const currentTile = grid[characterPosition.y]?.[characterPosition.x];
        if (currentTile) {
            switch (currentTile.type) {
                case 'city':
                    setModalState({ isOpen: true, locationType: 'city', locationName: currentTile?.name ?? 'Bravos' });
                case 'town':
                    setModalState({ isOpen: true, locationType: 'town', locationName: currentTile?.name ?? 'Riverwood' });
                    break;                case 'mystery':
                    toast({
                        title: 'A Mystery!',
                        description: 'You stumble upon a hidden treasure chest. You find 50 gold!',
                    });
                    break;
            }
        }
    }, [characterPosition, grid, router, toast]);

    if (isLoading) {
        return <div className="flex items-center justify-center h-screen bg-gray-900 text-white">Loading Realm...</div>;
    }

    const inventoryAsItems: TileInventoryItem[] = Object.values(inventory)
        .filter(t => t.type !== 'empty')
        .map(t => ({
            ...t,
            cost: t.cost ?? 0,
            quantity: t.quantity ?? 0,
        }));

    return (
        <div className="flex flex-col h-screen bg-gray-900 text-white relative" aria-label="realm-map-section">
            {/* Top Toolbar */}
            <div className="flex items-center justify-between p-2 bg-gray-800/80 backdrop-blur-sm border-b border-gray-700 z-30">
                <div className="flex items-center gap-4">
                    <div className="flex items-center gap-2">
                        <Button
                            variant={gameMode === 'move' ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => setGameMode('move')}
                            className="flex items-center gap-2"
                            aria-label="movement-mode-button"
                        >
                            <Move className="w-4 h-4" />
                            <span className="hidden sm:inline">Move</span>
                        </Button>
                        <Button
                            variant={gameMode === 'build' ? 'default' : 'outline'}
                            size="sm"
                            onClick={() => setGameMode('build')}
                            className="flex items-center gap-2"
                            aria-label="build-mode-button"
                        >
                            <Hammer className="w-4 h-4" />
                            <span className="hidden sm:inline">Build</span>
                        </Button>
                    </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}                    {saveStatus === 'saving' && (
                        <Badge variant="secondary" className="bg-yellow-600">
                            <Save className="w-3 h-3 mr-1" />
                            Saving...
                        </Badge>
                    )}
                    {saveStatus === 'saved' && (
                        <Badge variant="secondary" className="bg-green-600">
                            <Save className="w-3 h-3 mr-1" />
                            Saved
                        </Badge>
                    )}
                    {saveStatus === 'error' && (
                        <Badge variant="destructive">
                            Save Error
                        </Badge>
                    )}
                </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}
                <div className="flex items-center gap-4">
                    <div className="flex items-center space-x-2" aria-label="auto-save-controls">
                        <Switch id="auto-save-switch" checked={autoSave} onCheckedChange={setAutoSave} />
                        <label htmlFor="auto-save-switch" className="text-sm">Auto Save</label>
                    </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}                    <Button
                        variant="outline"
                        size="sm"
                        onClick={() => setShowInventory(!showInventory)}
                        className="flex items-center gap-2"
                        aria-label="toggle-inventory-button"
                    >
                        <Package className="w-4 h-4" />
                        <span className="hidden sm:inline">Inventory</span>
                    </Button>
                </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}            </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}            
            <div className="flex flex-1 overflow-hidden">
                {/* Main Map Area */}
                <div className="flex-1 relative">
                    <MapGrid
                        grid={grid}
                        onTileClick={handlePlaceTile}
                        character={characterPosition}
                        onCharacterMove={handleCharacterMove}
                        selectedTile={selectedTile}
                        setHoveredTile={() => {}}
                        isMovementMode={gameMode === 'move'}
                    />
                </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}
                {/* Side Inventory Panel */}
                {showInventory && (
                    <div className="absolute top-0 right-0 h-full w-96 bg-gray-800/90 backdrop-blur-sm border-l border-gray-700 flex flex-col z-20" aria-label="inventory-panel">
                        <div className="p-4 border-b border-gray-700 flex items-center justify-between">
                            <h2 className="text-lg font-semibold">Tile Inventory</h2>
                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => setShowInventory(false)}
                                aria-label="close-inventory-button"
                            >
                                <X className="w-4 h-4" />
                            </Button>
                        </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}                        <ScrollArea className="flex-1 p-4">
                            <TileInventory
                                tiles={inventoryAsItems}
                                selectedTile={selectedTile}
                                onSelectTile={handleTileSelection}
                                onUpdateTiles={(updatedTiles) => {
                                    const newInventory = { ...inventory };
                                    updatedTiles.forEach(tile => {
                                        if (newInventory[tile.type]) {
                                            newInventory[tile.type] = tile;
                                        }
                                    });
                                    setInventory(newInventory);
                                }}
                            />
                        </ScrollArea>
                    </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}                )}
            </div>
            {modalState && (
                <EnterLocationModal
                    isOpen={modalState.isOpen}
                    onClose={() => setModalState(null)}
                    locationType={modalState.locationType}
                    locationName={modalState.locationName}
                />
            )}
        </div>
    );
}        </div>
    );
}